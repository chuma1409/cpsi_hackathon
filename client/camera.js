// script.js

const cameraStream = document.getElementById('camera-stream');
const captureButton = document.getElementById('capture-button');
const retakeButton = document.getElementById('retake-button');
const submitButton = document.getElementById('submit-button');
const capturedImageCanvas = document.getElementById('captured-image');
const capturedImageContext = capturedImageCanvas.getContext('2d');

let isImageCaptured = false;

// Function to show a notification message
function showNotification(message, onOkay) {
    const notification = document.createElement('div');
    notification.classList.add('notification');
    notification.textContent = message;

    const okayButton = document.createElement('button');
    okayButton.textContent = 'Okay';
    okayButton.addEventListener('click', () => {
        onOkay();
        document.body.removeChild(notification);
    });

    notification.appendChild(okayButton);
    document.body.appendChild(notification);
}

// Function to show retake and submit buttons
function showRetakeAndSubmitButtons() {
    retakeButton.style.display = 'block';
    submitButton.style.display = 'block';
}

// Get access to the camera stream
async function startCamera() {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        cameraStream.srcObject = stream;
    } catch (error) {
        console.error('Error accessing camera:', error);
    }
}

// Capture a picture from the camera stream
function capturePicture() {
    const { videoWidth, videoHeight } = cameraStream;
    capturedImageCanvas.width = videoWidth;
    capturedImageCanvas.height = videoHeight;
    capturedImageContext.drawImage(cameraStream, 0, 0, videoWidth, videoHeight);
    
    isImageCaptured = true;
    showRetakeAndSubmitButtons();

    // Hide the camera stream and display the captured image
    cameraStream.style.display = 'none';
    capturedImageCanvas.style.display = 'block';
}

// Function to retake the picture
function retakePicture() {
    isImageCaptured = false;
    capturedImageCanvas.style.display = 'none';
    cameraStream.style.display = 'block';
    hideRetakeAndSubmitButtons();
}

// Function to submit the picture
function submitPicture() {
    if (isImageCaptured) {
        // Here, you can use the captured image data or send it to the backend
        console.log('Image submitted');
        const idNumber = sessionStorage.getItem('idNumber');
        const faceEncodings = {"0105085616124":[-0.15053190290927887, 0.0012471623485907912, 0.08643484115600586, -0.040868520736694336, -0.1064104437828064, -0.04363778233528137, -0.02866305038332939, -0.08352312445640564, 0.1921015828847885, -0.14104701578617096, 0.28093886375427246, -0.0033978591673076153, -0.20161911845207214, -0.10318256169557571, 0.04946628957986832, 0.16729876399040222, -0.12476670742034912, -0.07104039937257767, -0.031929805874824524, -0.08403458446264267, 0.024633945897221565, -0.07305706292390823, -0.011057705618441105, 0.04099952429533005, -0.13358008861541748, -0.33054324984550476, -0.09276590496301651, -0.14382125437259674, -0.00406871922314167, -0.04438026621937752, -0.00945433508604765, 0.0822882279753685, -0.17681242525577545, -0.013634812086820602, -0.033226385712623596, 0.06602679193019867, -0.010374505072832108, 0.018947845324873924, 0.1530718207359314, -0.03577679395675659, -0.18712946772575378, -0.006814117543399334, 0.017604047432541847, 0.158951997756958, 0.11865599453449249, -0.01034791674464941, 0.06100371852517128, -0.030343076214194298, 0.087788425385952, -0.2712734639644623, 0.03431306034326553, 0.0790947750210762, 0.1405182182788849, 0.019089577719569206, 0.05131060630083084, -0.1708560734987259, -0.058806199580430984, 0.08358786255121231, -0.1359073668718338, 0.08849974721670151, 0.021745508536696434, -0.11794913560152054, -0.13361649215221405, -0.053756240755319595, 0.30021002888679504, 0.16246198117733002, -0.17684391140937805, -0.08372418582439423, 0.14330077171325684, -0.08694157004356384, 0.01776495948433876, 0.11085084080696106, -0.14157326519489288, -0.18789087235927582, -0.28246819972991943, 0.07687193155288696, 0.41414332389831543, 0.0992329940199852, -0.23124608397483826, -0.009605967439711094, -0.22980566322803497, 0.03337867185473442, -0.0056077176705002785, 0.06710294634103775, 0.017943793907761574, 0.0020747724920511246, -0.08486954122781754, 0.0026870223227888346, 0.1587957739830017, -0.09444161504507065, 0.03636997565627098, 0.2522335946559906, 0.024936754256486893, 0.09952880442142487, -0.09359234571456909, -0.00557040236890316, -0.06501571089029312, -0.14261579513549805, -0.08132845163345337, -0.09772761166095734, 0.006500473245978355, -0.03454640880227089, -0.005627748090773821, 0.04180004075169563, -0.23270785808563232, 0.13918712735176086, 0.030159860849380493, -0.009380175732076168, 0.02783701941370964, 0.07472287118434906, -0.03895280137658119, -0.07153113931417465, 0.11376108974218369, -0.2633681893348694, 0.17616459727287292, 0.1706819087266922, 0.038329146802425385, 0.17673905193805695, 0.04329666122794151, 0.05674174800515175, -0.054966431111097336, -0.07135757058858871, -0.08714786916971207, -0.013712840154767036, 0.0392170213162899, -0.027974750846624374, -0.009083189070224762, 0.013170692138373852],"0105085616123":[-0.1345314383506775, 0.14222362637519836, 0.1403161883354187, 0.04030288755893707, 0.00405123783275485, -0.05934865400195122, 0.032741185277700424, -0.02010822668671608, 0.11284569650888443, -0.0530119426548481, 0.2589999735355377, 0.0021501192823052406, -0.1808961033821106, -0.20855924487113953, 0.11328084766864777, 0.1065157875418663, -0.17376087605953217, -0.13538426160812378, -0.112873375415802, -0.08975378423929214, -0.0020956837106496096, 0.07847118377685547, 0.0009110908140428364, 0.0003752338234335184, -0.17950351536273956, -0.31880274415016174, -0.04260392487049103, -0.16359740495681763, 0.10233171284198761, -0.05934768170118332, -0.014470367692410946, 0.03025764785706997, -0.1957327127456665, -0.03659911826252937, -0.03606283292174339, 0.04309575632214546, 0.046981364488601685, -0.02716044709086418, 0.12924398481845856, 0.055466584861278534, -0.13840718567371368, -0.09847252070903778, -0.03440304100513458, 0.28570273518562317, 0.16831031441688538, -0.04872783273458481, 0.0006495332927443087, 0.055658578872680664, 0.06712330132722855, -0.23329155147075653, 0.01731962524354458, 0.09243233501911163, 0.16177624464035034, 0.07643866539001465, 0.01866668276488781, -0.1276043951511383, -0.00982546154409647, 0.014247405342757702, -0.21670156717300415, 0.030485648661851883, 0.004537761211395264, -0.14658088982105255, -0.11469922959804535, -0.025727005675435066, 0.2975386679172516, 0.07025302201509476, -0.09797821938991547, -0.12279500812292099, 0.19847014546394348, -0.11361772567033768, -0.017189867794513702, 0.11278124898672104, -0.10417398810386658, -0.048126526176929474, -0.3207164406776428, 0.10679471492767334, 0.328861802816391, 0.0729629173874855, -0.20345546305179596, -0.012028079479932785, -0.21357929706573486, 0.016957931220531464, -0.06754539161920547, 0.031769756227731705, -0.12109898775815964, 0.08654303848743439, -0.12361744791269302, 0.04229333996772766, 0.16015559434890747, -0.0210823193192482, -0.031944893300533295, 0.21976445615291595, 0.006512654013931751, 0.012881833128631115, 0.0464433990418911, -0.10152376443147659, -0.01366394478827715, -0.11531034857034683, -0.05938968062400818, -0.046599991619586945, 0.10637274384498596, -0.1466672122478485, -0.012780580669641495, 0.12686416506767273, -0.1949278563261032, 0.1235821396112442, 0.05148790031671524, -0.024292126297950745, 0.06965097039937973, 0.031103983521461487, -0.10952913016080856, -0.10606629401445389, 0.1682082861661911, -0.2123325616121292, 0.16953504085540771, 0.15839867293834686, 0.07775326073169708, 0.12108682096004486, 0.022508183494210243, 0.0790177658200264, -0.1295810043811798, -0.018329167738556862, -0.08598340302705765, -0.04568466916680336, 0.08391682058572769, -0.06371530890464783, 0.016752811148762703, 0.03612763434648514]};
        if (faceEncodings.hasOwnProperty(idNumber)) {
            const requestData = {
                "id_number": idNumber,
                "face_encoding": faceEncodings[idNumber]
            };
            // set name to sessionStorage
            const num = 0;
            if (idNumber == "0105085616124") {
                sessionStorage.setItem('name', "Chuma");
                sessionStorage.setItem("number",num+1)
            } else {
                sessionStorage.setItem('name', "Ondwela");
                sessionStorage.setItem("number",num+1)
            }
            fetch('http://localhost:8000/verify_face', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestData)
            })
            .then(response => response.json())
            .then(data => {
                console.log('Response:', data);
                // You can handle the response here
                if (data.verification_results === true) {
                    window.location.href = 'l.html'; 
                }
            })
            .catch(error => {
                console.error('Error sending request:', error);
            });}
    } else {
        console.log('No image to submit');
    }
}

function hideRetakeAndSubmitButtons() {
    captureButton.style.display = 'block';
    retakeButton.style.display = 'none';
    submitButton.style.display = 'none';
}

// Start the camera when the page loads
window.addEventListener('load', () => {
    showNotification('You will be taking a picture for verification.', startCamera);

    captureButton.addEventListener('click', capturePicture);
    retakeButton.addEventListener('click', retakePicture);
    submitButton.addEventListener('click', submitPicture);

    hideRetakeAndSubmitButtons();
});
